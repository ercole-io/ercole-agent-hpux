#!/usr/bin/perl

# Copyright (c) 2019 Sorint.lab S.p.A.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

package main;

use strict;
use warnings;
use diagnostics;

use lib "./lib/JSON";
use PP;
use lib "./config";
use config;
use lib "./marshal";
use common;
use host;
use filesystems;
use database;
use tablespaces;
use schemas;
use features;
use licenses;
use patches;
use addms;
use segmentadvisors;
use psu;
use backup;
use LWP;
use MIME::Base64;

my $version = "latest";

sub main {
    my %configuration = config::ReadConfig(); #ok
 
	while (1) {
    	buildData(%configuration); #ok
  		sleep(3600 * $configuration{'frequency'});
	}

}

sub buildData { #OK
    my %configuration = @_;
    my $out = fetcher("host", "", "X"); #ok
    my %host = marshal::Host($out); #ok
        
    $host{'Environment'} = $configuration{'envtype'};
    $host{'Location'} = $configuration{'location'};

    $out = fetcher("filesystem", "", "X"); #ok
    my @filesystems = marshal::Filesystems($out); #array of hashes' address, ok

    my @dbs = readOratab(); #1
	
	my @databases;

    foreach my $db (@dbs){
        my $dbStatus = fetchDbStatus($db, "X"); #OPEN
        
        if ($dbStatus eq "OPEN") {
			my $outVersion = fetcher("dbversion", $db, "X"); #$db=XE, #outVersion 18.0.0.0
            my $prefix = substr $outVersion, 0, 2; 
			
			my $dbVersion = "12";

			if ($prefix eq "11"){
				$dbVersion = "11";
			} elsif($prefix eq "10"){
				$dbVersion = "10";
			} elsif($prefix eq "9"){
				$dbVersion = "9";
			}
		
			#DA RIMETTERE ALLA FINE
			# if ($configuration{'forcestats'}) { #true, ok
			# 	fetcher("stats", $db, $dbVersion); #Update db stats
			# }

			$out = fetcher("db", $db, $dbVersion); 
			my %database = marshal::Database($out); #OK 

			$out = fetcher("tablespace", $db, $dbVersion);
			$database{'Tablespaces'} = marshal::Tablespaces($out); #OK
			
			$out = fetcher("schema", $db, $dbVersion);
			$database{'Schemas'} = marshal::Schemas($out); #OK

			$out = fetcher("patch", $db, $dbVersion); #empty, OK
			$database{'Patches'} = marshal::Patches($out); #OK

			$out = fetcher("feature", $db, $dbVersion);
			$database{'Features'} = marshal::Features($out); #OK 

			$out = fetchLicenses($db, $host{'Type'}, $dbVersion);
			$database{'Licenses'} = marshal::Licenses($out); #OK
			
			$out = fetcher("addm", $db, $dbVersion);
			$database{'ADDMs'} = marshal::Addms($out); #OK 

			$out = fetcher("segmentadvisor", $db, $dbVersion);
			$database{'SegmentAdvisors'} = marshal::SegmentAdvisor($out); #OK 

			$out = fetcher("psu", $db, $dbVersion);
			$database{'LastPSUs'} = marshal::PSU($out); #OK 

			$out = fetcher("backup", $db, $dbVersion);
			$database{'Backups'} = marshal::Backups($out); #OK 

			push (@databases, {%database}); #OK
			
		} elsif ($dbStatus eq "MOUNTED") {
			$out = fetcher("dbmounted", $db, "X");
			my %database = marshal::Database($out); #should work, test with db not open
			push (@databases, {%database}); #should work, test with db not open
		}
    }

	my %hostData;
	
	my %extraInfo;
	$extraInfo{'Filesystems'} = \@filesystems;
	$extraInfo{'Databases'} = \@databases;

	$hostData{'Extra'} = \%extraInfo;
	$hostData{'Info'} = \%host;
	$hostData{'Hostname'} = $host{'Hostname'};
	
	#override host name with the one in config if != default
	if ($configuration{'hostname'} ne "default") {
		$hostData{'Hostname'} = $configuration{'hostname'};
	}

	$hostData{'Environment'} = $configuration{'envtype'};
	$hostData{'Location'} = $configuration{'location'};
	$hostData{'Version'} = $version;

	#Fill index fields
	my $hdDatabases = "";
	my $hdSchemas = "";
	
	foreach my $i (@databases){
		no warnings 'uninitialized';
		my %db = %$i;
		
		$hdDatabases = $hdDatabases . $db{'Name'} . " ";
		
		my $temp = $db{'Schemas'};
		my @schemas = @$temp;

		foreach my $j (@schemas) {
			my %schema = %$j;
			$hdSchemas = $hdSchemas . $schema{'User'} . " ";
		}
	}

	$hdDatabases = marshal::trim($hdDatabases);
	$hostData{'Databases'} = $hdDatabases;

	$hdSchemas = marshal::trim($hdSchemas);
	$hostData{'Schemas'} = $hdSchemas;

	sendData(\%hostData, \%configuration);

}

sub sendData { #to test if success
	no warnings 'uninitialized';
    my ($d, $c) = @_;

	my %data = %$d;
	my %configuration = %$c;

	marshal::logPrintln("Sending data...");

	my $b = JSON::PP::encode_json(\%data);
	marshal::logPrintln("Data: " . $b);

	my $client = LWP::UserAgent->new;

	# Disable certificate validation if enableServerValidation is false
	if ($configuration{'EnableServerValidation'} eq "false"){
		$client->ssl_opts(verify_hostname => 0);	
	}

	my $auth = $configuration{'serverusr'}.":".$configuration{'serverpsw'};
	my $authEnc = encode_base64($auth);
	
	my $headers = HTTP::Headers->new;
	$headers->header('Content-Type' => 'application/json');
	$headers->header('Authorization' => 'Basic '.$authEnc);

	my $url = $configuration{'serverurl'};
	
	my $req = HTTP::Request->new( 'POST', $url, $headers, $b);

	my $response = $client->request( $req );
	
	my $sendResult = "FAILED";

	marshal::getTime();

	if ($response->is_success) {
		print STDERR "Response status: ". $response->status_line. "\n";
		if ($response->status_line eq '200 OK') {
			$sendResult = "SUCCESS";
		}
	} else {
		print STDERR "Error sending data: ". $response->status_line . "\n";
	}

	marshal::logPrintln("Sending result: ".$sendResult);
}

sub fetcher {
    no warnings 'uninitialized';
    my ($fetcherName, $sid, $dbVersion) = @_;

	marshal::logPrintln("Fetching ".$fetcherName.": ".$sid);
    my $baseDir = config::getBaseDir();
    	
    my $cmd = $baseDir."/fetch/".$fetcherName;
    my $out = qx/$cmd $sid $dbVersion/; #cmd execution

	return $out;
}

sub fetchDbStatus {
    no warnings 'uninitialized';
    my ($sid, $dbVersion) = @_;
	marshal::logPrintln("Fetching db status: ".$sid);
    my $baseDir = config::getBaseDir();
        
	my $cmd = $baseDir."/fetch/dbstatus";
    my $out = qx/$cmd $sid $dbVersion/ or die "UNREACHABLE"; #cmd execution

    return $out;
}

sub fetchLicenses {
    no warnings 'uninitialized';
    my ($sid, $hostType, $dbVersion) = @_;
    
	marshal::logPrintln("Fetching license: ".$sid);
    
	my $baseDir = config::getBaseDir();
    my $cmd = $baseDir."/fetch/license";
    my $out = qx/$cmd $sid $hostType $dbVersion/;
    return $out;
}

sub readOratab {
    my $baseDir = config::getBaseDir();
    
    my $cmd = $baseDir."/fetch/oratab";
    my $out = qx/$cmd/;
    
	my @dbs;
    for my $c (split /\n/, $out) {
        my $line = $c;
        push(@dbs, $line);
    }
    return @dbs;
}

main();